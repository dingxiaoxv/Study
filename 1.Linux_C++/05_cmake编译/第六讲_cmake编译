# 第六讲 CMake工程编译

[TOC]

------

# **前言**：

1.介绍CMake语法特性。

2.CMake重要指令和常用变量。

3.编译多目录生成库文件/可执行文件的工程。

# 1. CMake语法特性

CMake是一个跨平台的安装编译工具，可以用简单的语句来描述所有平台的安装(编译过程)。通过在CMakeLists.txt文件中进行修改，就可以轻松实现工程项目的跨平台构建，而无需大费周章地在每个平台中分别构建（如图）。CMake已经成为大部分C++开源项目标配。

![640 ](/home/dyx/programming/Linux_C++开发/05_cmake编译/640 .png)

**基本语法格式：指令(参数 1 参数 2…)**

- 参数使用括弧括起

- 参数之间使用**空格**或**分号**分开

- **指令**是大小写无关的，**参数和变量**是大小写相关的

- 变量使用`${}`方式取值，但是在 IF 控制语句中是直接使用变量名


```cmake
set(HELLO hello.cpp)
# 参数之间使用**空格**或**分号**分开
add_executable(hello main.cpp hello.cpp)
# 指令是大小写无关的，参数和变量是大小写相关的
# 变量使用${}方式取值
ADD_EXECUTABLE(hello main.cpp ${HELLO})
# IF控制语句中是直接使用变量名，不能使用${}方式取值
IF(HELLO)
```

# 2. CMake重要指令和常用变量

## 2.1 重要指令

### **2.1.1 cmake_minimum_required**

- 作用：指定CMake的最小版本要求
- 语法：cmake_minimum_required(VERSION 版本号)

```cmake
# CMake最小版本要求为2.8.3
cmake_minimum_required(VERSION 2.8.3)
```

查看CMake版本：`cmake --version`

### **2.1.2 project**

- 作用：定义工程名称，并可指定工程支持的语言 
- 语法：project(工程名 [CXX] [C] [Java])

```cmake
# 指定工程名为HELLOWORLD
project(HELLOWORLD)
```

### **2.1.3 set**

- 作用：定义变量
- 语法：set(变量名 value1 value2 ...)

```cmake
# 定义SRC变量，其值为main.cpp hello.cpp
set(SRC main.cpp hello.cpp)
```

### **2.1.4 include_directories**

- 作用：添加多个头文件搜索路径（相当于指定g++编译器的-I参数）
- 语法：include_directories(dir1 dir2 …)
- 路径可以是绝对路径也可以是相对路径

```cmake
# 将/usr/include/myincludefolder 和 ./include添加到头文件搜索路径
include_directories(/usr/include/myincludefolder ./include)
```

### **2.1.5 link_directories**

- 作用：添加多个库文件搜索路径（相当于指定g++编译器的-L参数）
- 语法：link_directories(dir1 dir2 …) 

```cmake
# 将/usr/lib/mylibfolder 和 ./lib 添加到库文件搜索路径
link_directories(/usr/lib/mylibfolder ./lib)
```

### **2.1.6 add_library**

- 作用：生成库文件
- 语法：add_library(库名 [SHARED|STATIC] source1 source2 …)
- SHARED：生成动态库
- STATIC：生成静态库

```cmake
# 通过变量SRC生成libhello.so动态库
add_library(hello SHARED ${SRC})
# 通过源文件hello.cpp生成libhello.a静态库
add_library(hello STATIC hello.cpp)
```

### **2.1.7 add_compile_options** 

- 作用：设置编译参数
- 语法：add_compile_options( )
- 常用编译参数详见：

```cmake
# 添加编译参数 -Wall -std=c++11 -O2
add_compile_options(-Wall -std=c++11 -O2)
```

### **2.1.8 add_executable**

- 作用：生成可执行文件
- 语法：add_executable(可执行文件名 source1 source2 …)

```cmake
# 编译main.cpp生成可执行文件main
add_executable(main main.cpp)
```

### 2.1.9 target_link_libraries

- 作用：为 target 添加需要链接的库文件（相当于指定g++编译器-l参数）
- 语法：target_link_libraries(target library1 library2…)
- 其中，target为库文件或可执行文件

```cmake
# 将libhello.so动态库文件链接到可执行文件main
target_link_libraries(main hello)
```

### 2.1.10 add_subdirectory

- 作用：添加子目录，这样他就可以去子目录文件夹中查找编译
- 语法：add_subdirectory(sub_dir)
- 子目录中需有一个CMakeLists.txt

```cmake
# 添加src子目录，src中需有一个CMakeLists.txt
add_subdirectory(src)
```

### 2.1.11 aux_source_directory

- 作用：寻找一个目录下所有的源代码文件并将列表存储在一个变量中，这个指令临时被用来自动构建源文件列表
- 语法：aux_source_directory(source_dir VARIABLE)

```cmake
# 定义SRC变量，其值为src目录下所有的源代码文件
aux_source_directory(src SRC_LIST)
# 编译SRC变量所代表的源代码文件，生成main可执行文件
add_executable(main ${SRCSRC_LIST})
```

## 2.2 CMake常用变量

### 2.2.1 编译选项

- **CMAKE_C_FLAGS**：gcc编译选项

- **CMAKE_CXX_FLAGS**：g++编译选项

```cmake
# 在CMAKE_CXX_FLAGS编译选项后追加-std=c++11
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
```

- **CMAKE_BUILD_TYPE**：编译类型(Debug, Release)

```cmake
# 设定编译类型为debug，调试时需要选择debug
set(CMAKE_BUILD_TYPE Debug) 
# 设定编译类型为release，发布时需要选择release
set(CMAKE_BUILD_TYPE Release) 
```

### 2.2.2 目录

工程编译目录(build)：

- **CMAKE_BINARY_DIR**
- **PROJECT_BINARY_DIR**

工程主目录：

- **CMAKE_SOURCE_DIR**
- **PROJECT_SOURCE_DIR**

### 2.2.3 文件输出路径

- **EXECUTABLE_OUTPUT_PATH**：可执行文件输出的存放路径
- **LIBRARY_OUTPUT_PATH**：库文件输出的存放路径

# 3. CMake编译工程

CMake目录结构：项目主目录需要存在一个**CMakeLists.txt**文件

**两种方式设置编译规则**：

1. 子目录包含CMakeLists.txt文件，主目录的CMakeLists.txt通过add_subdirectory添加子目录，子目录编译规则体现在子目录下的CMakeLists.txt中；
2. 子目录未包含CMakeLists.txt文件，子目录编译规则体现在主目录的CMakeLists.txt中；

## 3.1 编译流程

**在 linux 平台下使用 CMake 构建C/C++工程的流程：**

推荐使用外部构建（创建build文件夹）方式：

1. 手动编写 CmakeLists.txt。
2. 创建build文件夹存放输出文件。
3. 执行命令 `cmake PATH`生成 Makefile ( PATH 是顶层CMakeLists.txt 所在的目录 )。
4. 执行命令`make` 进行编译。

```bash
# 1. 在当前目录下，创建build文件夹
mkdir build 
# 2. 进入到build文件夹
cd build
# 3. 编译上级目录的CMakeLists.txt，生成Makefile和其他文件
cmake ..
# 4. 执行make命令，生成target
make
```

## 3.2 CMake编译实践

**多目录工程 - 生成库文件编译：**

```bash
.
├── include
│   └── swap.h
├── main.cpp
└── src
    └── swap.cpp

2 directories, 3 files
```

src目录下的CMakeLists.txt：

```bash
# 寻找该目录下所有的源代码文件并将列表存储在SRC_LIST中
aux_source_directory(. SRC_LIST)

# 指定库文件输出的存放路径
set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/lib)

# 生成静态库文件
add_library(swap_lib STATIC ${SRC_LIST})
```

项目主目录的CMakeLists.txt：

```bash
# 指定CMake的最小版本要求
cmake_minimum_required(VERSION 3.0)

# 定义工程名称
project(SWAP)

# 设置编译参数
add_compile_options(-Wall -std=c++11)

# 添加头文件搜索路径
include_directories(include)

# 添加src子目录
add_subdirectory(src)

# 指定可执行文件输出的存放路径
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin)

# 生成可执行文件
add_executable(swap_cmake main.cpp)

# 为可执行文件添加需要链接的库文件
target_link_libraries(swap_cmake swap_lib)
```

代码运行结果：

![目录](/home/dyx/programming/Linux_C++开发/05_cmake编译/目录.png)
